generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id            Int      @id @default(autoincrement())
  action        ACTION
  date          DateTime @default(now())
  awner_id      Int
  table_name_id String?  @default("")
  table_name    TABLE
  Awner         Awner    @relation(fields: [awner_id], references: [id])
}

model Awner {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  description     String?           @default("")
  image           String?           @default("")
  isPriamry       Boolean?          @default(false)
  Activity        Activity[]
  CategoryProject CategoryProject[]
  CategorySkill   CategorySkill[]
  ColorsSetting   ColorsSetting[]
  FuturePlan      FuturePlan[]
  JobTitle        JobTitle[]
  Link            Link[]
  LinkType        LinkType[]
  Message         Message[]
  Phone           Phone[]
  Project         Project[]
  ProjectNote     ProjectNote[]
  Skill           Skill[]
  Visitor         Visitor[]
}

model CategoryProject {
  id            Int       @id @default(autoincrement())
  category_name String    @db.VarChar(255)
  awner_id      Int
  Awner         Awner     @relation(fields: [awner_id], references: [id])
  Project       Project[]
}

model CategorySkill {
  id                   Int                    @id @default(autoincrement())
  category_name        String                 @db.VarChar(255)
  awner_id             Int
  Awner                Awner                  @relation(fields: [awner_id], references: [id])
  ProjectCategorySkill ProjectCategorySkill[]
  Skill                Skill[]
}

model ColorsSetting {
  id         Int    @id @default(autoincrement())
  main_color String @db.VarChar(20)
  color1     String @db.VarChar(20)
  color2     String @db.VarChar(20)
  awner_id   Int
  Awner      Awner  @relation(fields: [awner_id], references: [id])
}

model FuturePlan {
  id           Int     @id @default(autoincrement())
  plan         String
  awner_id     Int
  is_completed Boolean @default(false)
  Awner        Awner   @relation(fields: [awner_id], references: [id])
}

model JobTitle {
  id       Int    @id @default(autoincrement())
  title    String @db.VarChar(50)
  awner_id Int
  Awner    Awner  @relation(fields: [awner_id], references: [id])

  @@unique([title, awner_id]) // Composite unique constraint
}

model Link {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  link         String   @db.VarChar(255)
  icon         String?
  link_type_id Int
  awner_id     Int
  Awner        Awner    @relation(fields: [awner_id], references: [id])
  LinkType     LinkType @relation(fields: [link_type_id], references: [id])
}

model LinkType {
  id        Int    @id @default(autoincrement())
  link_type String @db.VarChar(30)
  awner_id  Int
  Link      Link[]
  Awner     Awner  @relation(fields: [awner_id], references: [id])

  @@unique([link_type, awner_id])
}

model Message {
  id         Int     @id @default(autoincrement())
  subject    String  @db.VarChar(255)
  message    String  @db.VarChar(255)
  visitor_id String
  awner_id   Int
  Awner      Awner   @relation(fields: [awner_id], references: [id])
  Visitor    Visitor @relation(fields: [visitor_id], references: [id])
}

model Phone {
  id           Int    @id @default(autoincrement())
  phone_number String @unique @db.VarChar(30)
  awner_id     Int
  Awner        Awner  @relation(fields: [awner_id], references: [id])
}

model Project {
  id                   Int                    @id @default(autoincrement())
  title                String                 @db.VarChar(255)
  description          String?
  live_url             String?
  repo_url             String?
  status               String                 @db.VarChar(255)
  created_at           DateTime               @default(now())
  ended_at             DateTime?
  attachment           String?
  category_project_id  Int?
  awner_id             Int
  Awner                Awner                  @relation(fields: [awner_id], references: [id])
  CategoryProject      CategoryProject?       @relation(fields: [category_project_id], references: [id])
  ProjectCategorySkill ProjectCategorySkill[]
  ProjectNote          ProjectNote[]
  ProjectSkill         ProjectSkill[]
}

model ProjectCategorySkill {
  project_id         Int
  category_skills_id Int
  CategorySkill      CategorySkill @relation(fields: [category_skills_id], references: [id])
  Project            Project       @relation(fields: [project_id], references: [id])

  @@id([project_id, category_skills_id])
}

model ProjectNote {
  id         Int     @id @default(autoincrement())
  notes      String?
  project_id Int
  visitor_id String
  react      String  @db.VarChar(255)
  awner_id   Int
  Awner      Awner   @relation(fields: [awner_id], references: [id])
  Project    Project @relation(fields: [project_id], references: [id])
  Visitor    Visitor @relation(fields: [visitor_id], references: [id])
}

model ProjectSkill {
  project_id Int
  skill_id   Int
  Project    Project @relation(fields: [project_id], references: [id])
  Skill      Skill   @relation(fields: [skill_id], references: [id])

  @@id([project_id, skill_id])
}

model Skill {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  icon          String?
  category_id   Int
  awner_id      Int
  ProjectSkill  ProjectSkill[]
  Awner         Awner          @relation(fields: [awner_id], references: [id])
  CategorySkill CategorySkill  @relation(fields: [category_id], references: [id])
}

model Visitor {
  id          String        @id
  name        String        @db.VarChar(255)
  email       String        @unique
  image       String?
  login_by    String        @db.VarChar(255)
  awner_id    Int
  Message     Message[]
  ProjectNote ProjectNote[]
  Awner       Awner         @relation(fields: [awner_id], references: [id])
}

enum TABLE {
  AWNER
  FUTURE_PLANS
  LINK_TYPES
  LINKS
  PHONES
  JOB_TITLES
  COLOR_SETTINGS
  SKILLS
  CATEGORY_SKILLS
  PROJECTS
  MESSAGES
  CATEGORY_PROJECTS
  PROJECT_NOTES
  VISITORS
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}
